:root {
  /* --color-text-white: #dee2e6; */
  /* --color-text-2: #adb5bd; */
  --max-width: 120rem;
  --border-radius: 1.2rem;
  --color-primary-darkest: #0e1802;
  --color-primary-dark: #365f09;
  --color-primary: #44770b;
  --color-primary-light: #57823c;
  --color-primary-lightest: #a2bb85;
  --color-white-brand: hsl(0, 0%, 92%);
  --color-text: #333333;
  --color-text-2: #999999;
  --color-background: #f4f4f4;
  --color-background-1: #dcdcdc;
  --color-background-2: #c3c3c3;
  --color-secondary-darkest: #321a04;
  --color-secondary-dark: #c76610;
  --color-secondary: #f98014;
  --color-secondary-light: #fa8d2c;
  --color-secondary-lightest: #fee6d0;
  --font-primary: 1.6rem;
  --font-header: 3.2rem;
  --shadow-primary: 1px 1px 4rem 0rem var(--color-text);
  --shadow-secondary: 1px 1px 0.4rem 0rem var(--color-background-2);
  --radius-primary: 0.4rem;
  --font-mono: ui-monospace, Menlo, Monaco, "Cascadia Mono", "Segoe UI Mono",
    "Roboto Mono", "Oxygen Mono", "Ubuntu Monospace", "Source Code Pro",
    "Fira Mono", "Droid Sans Mono", "Courier New", monospace;
}

/* content in grid and flex is talking about a collection of all the items as the relate with a container
that is relationship between the contents seeing them as a group with their container . that is why 
in flex there is justify content, which talks about all the contents, being moved one time withing the container
incase the items are not stretching .and it makes no sense to have align content in flex, since it will be doing just the same
thing like align items.also there is no justify items in flex since it is one dimensional and does not have 
other items below it to take part in the arrangement

AUTO-FIT AND AUTO-FILL MUST ALWAYS GO WITH A MIN MAX or a defined width, it does not go with fr
when you spacify min or max content first in a autofill/fit, it must follow a real width and not 1fr
*/

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  /* line-height: 0; */
}

*:focus {
  border: none;
  outline: none;
}

html {
  font-size: 62.5%;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Poppins, Roboto,
    Poppins, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue",
    sans-serif;
  color: var(--color-primary);
}

.grid-container {
  display: grid;
  grid-template-columns:
    [full-start] minmax(4rem, 1fr) [left-margin-end cont-start] repeat(
      auto-fit,
      [col-start] minmax(min-content, 16rem) [col-end]
    )
    [cont-end right-margin-start] minmax(4rem, 1fr) [full-end];

  grid-template-rows: [full-start] auto [const-start] 1fr [cont-end] auto[full-end];
  background-color: var(--color-background);
  position: relative;
  /* this relative postion is to contain the hero container which is an absolute element.
  without it, the container can still stay inside the home page main, but this is semantically correct */

  /* I set the min as the min-content and then declare a fix width as the max
   that way, as it gets smaller ,it keeps adjusting */
}

@media only screen and (max-width: 65em) {
  /* … */
}
@media only screen and (max-width: 52em) {
  html {
    font-size: 60%;
  }
  /* … */
}
@media only screen and (max-width: 32em) {
  .grid-container {
    grid-template-columns:
      [full-start] minmax(2.4rem, 1fr) [left-margin-end cont-start] repeat(
        auto-fit,
        minmax(min-content, 16rem)
      )
      [cont-end right-margin-start] minmax(2.4rem, 1fr) [full-end];
  }

  /* … */
}
@media only screen and (max-width: 22em) {
  /* … */
}
